//
//  Adobe Downloader
//
//  Created by X1a0He on 2024/10/30.
//

import SwiftUI
import Sparkle
import Combine


private enum AboutViewConstants {
    static let appIconSize: CGFloat = 96
    static let titleFontSize: CGFloat = 18
    static let subtitleFontSize: CGFloat = 14
    static let linkFontSize: CGFloat = 14
    static let licenseFontSize: CGFloat = 12
    
    static let verticalSpacing: CGFloat = 12
    static let formPadding: CGFloat = 8
    
    static let links: [(title: String, url: String)] = [
        ("@X1a0He", "https://t.me/X1a0He_bot"),
        ("Github: Adobe Downloader", "https://github.com/X1a0He/Adobe-Downloader"),
        ("Drovosek01: adobe-packager", "https://github.com/Drovosek01/adobe-packager"),
        ("QiuChenly: InjectLib", "https://github.com/QiuChenly/InjectLib")
    ]
}

struct ExternalLinkView: View {
    let title: String
    let url: String
    
    var body: some View {
        Link(title, destination: URL(string: url)!)
            .font(.system(size: AboutViewConstants.linkFontSize))
            .foregroundColor(.blue)
    }
}

struct AboutView: View {
    private let updater: SPUUpdater
    @State private var selectedTab = "general_settings"
    
    init(updater: SPUUpdater) {
        self.updater = updater
    }
    
    var body: some View {
        TabView(selection: $selectedTab) {
            GeneralSettingsView(updater: updater)
                .tabItem {
                    Label("ÈÄöÁî®", systemImage: "gear")
                }
                .tag("general_settings")
            
            CleanupView()
                .tabItem {
                    Label("Ê∏ÖÁêÜÂ∑•ÂÖ∑", systemImage: "trash")
                }
                .tag("cleanup_view")
            
            QAView()
                .tabItem {
                    Label("Â∏∏ËßÅÈóÆÈ¢ò", systemImage: "questionmark.circle")
                }
                .tag("qa_view")
            
            AboutAppView()
                .tabItem {
                    Label("ÂÖ≥‰∫é", systemImage: "info.circle")
                }
                .tag("about_app")
        }
        .background(Color(NSColor.windowBackgroundColor))
        .frame(width: 600)
        .onAppear {
            selectedTab = "general_settings"
        }
    }
}

struct AboutAppView: View {
    private var appVersion: String {
        Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "Unknown"
    }
    
    var body: some View {
        VStack(spacing: AboutViewConstants.verticalSpacing) {
            appIconSection
            appInfoSection
            linksSection
            licenseSection
        }
        .padding()
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
    
    private var appIconSection: some View {
        Image(nsImage: NSApp.applicationIconImage)
            .resizable()
            .frame(width: AboutViewConstants.appIconSize, height: AboutViewConstants.appIconSize)
    }
    
    private var appInfoSection: some View {
        Group {
            Text("Adobe Downloader \(appVersion)")
                .font(.system(size: AboutViewConstants.titleFontSize))
                .bold()
            
            Text("By X1a0He. ‚ù§Ô∏è Love from China. üá®üá≥")
                .font(.system(size: AboutViewConstants.subtitleFontSize))
                .foregroundColor(.secondary)
        }
    }
    
    private var linksSection: some View {
        ForEach(AboutViewConstants.links, id: \.url) { link in
            ExternalLinkView(title: link.title, url: link.url)
        }
    }
    
    private var licenseSection: some View {
        Text("GNUÈÄöÁî®ÂÖ¨ÂÖ±ËÆ∏ÂèØËØÅGPL v3.")
            .font(.system(size: AboutViewConstants.licenseFontSize))
            .foregroundColor(.secondary)
    }
}

struct PulsingCircle: View {
    let color: Color
    @State private var scale: CGFloat = 1.0
    
    var body: some View {
        Circle()
            .fill(color)
            .frame(width: 8, height: 8)
            .scaleEffect(scale)
            .animation(
                Animation.easeInOut(duration: 1.0)
                    .repeatForever(autoreverses: true),
                value: scale
            )
            .onAppear {
                scale = 1.5
            }
    }
}

final class GeneralSettingsViewModel: ObservableObject {
    @Published var setupVersion: String = ""
    @Published var isDownloadingSetup = false
    @Published var setupDownloadProgress = 0.0
    @Published var setupDownloadStatus = ""
    @Published var showAlert = false
    @Published var alertMessage = ""
    @Published var isSuccess = false
    @Published var showDownloadAlert = false
    @Published var showLanguagePicker = false
    @Published var showDownloadConfirmAlert = false
    @Published var showReprocessConfirmAlert = false
    @Published var isProcessing = false
    @Published var helperConnectionStatus: HelperConnectionStatus = .disconnected
    @Published var downloadAppleSilicon: Bool {
        didSet {
            StorageData.shared.downloadAppleSilicon = downloadAppleSilicon
        }
    }

    var defaultLanguage: String {
        get { StorageData.shared.defaultLanguage }
        set { StorageData.shared.defaultLanguage = newValue }
    }
    
    var defaultDirectory: String {
        get { StorageData.shared.defaultDirectory }
        set { StorageData.shared.defaultDirectory = newValue }
    }
    
    var useDefaultLanguage: Bool {
        get { StorageData.shared.useDefaultLanguage }
        set { StorageData.shared.useDefaultLanguage = newValue }
    }
    
    var useDefaultDirectory: Bool {
        get { StorageData.shared.useDefaultDirectory }
        set { StorageData.shared.useDefaultDirectory = newValue }
    }
    
    var confirmRedownload: Bool {
        get { StorageData.shared.confirmRedownload }
        set { 
            StorageData.shared.confirmRedownload = newValue
            objectWillChange.send()
        }
    }

    @Published var automaticallyChecksForUpdates: Bool
    @Published var automaticallyDownloadsUpdates: Bool

    @Published var isCancelled = false

    private var cancellables = Set<AnyCancellable>()
    let updater: SPUUpdater

    enum HelperConnectionStatus {
        case connected
        case connecting
        case disconnected
        case checking
    }

    init(updater: SPUUpdater) {
        self.updater = updater
        self.automaticallyChecksForUpdates = updater.automaticallyChecksForUpdates
        self.automaticallyDownloadsUpdates = updater.automaticallyDownloadsUpdates
        self.downloadAppleSilicon = StorageData.shared.downloadAppleSilicon
        
        self.helperConnectionStatus = .connecting
        
        PrivilegedHelperManager.shared.$connectionState
            .receive(on: DispatchQueue.main)
            .sink { [weak self] state in
                switch state {
                case .connected:
                    self?.helperConnectionStatus = .connected
                case .disconnected:
                    self?.helperConnectionStatus = .disconnected
                case .connecting:
                    self?.helperConnectionStatus = .connecting
                }
            }
            .store(in: &cancellables)
        
        PrivilegedHelperManager.shared.executeCommand("whoami") { _ in }
        
        NotificationCenter.default.publisher(for: .storageDidChange)
            .receive(on: RunLoop.main)
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
    }

    deinit {
        cancellables.removeAll()
    }

    func updateAutomaticallyChecksForUpdates(_ newValue: Bool) {
        automaticallyChecksForUpdates = newValue
        updater.automaticallyChecksForUpdates = newValue
    }

    func updateAutomaticallyDownloadsUpdates(_ newValue: Bool) {
        automaticallyDownloadsUpdates = newValue
        updater.automaticallyDownloadsUpdates = newValue
    }

    var isAutomaticallyDownloadsUpdatesDisabled: Bool {
        !automaticallyChecksForUpdates
    }

    func cancelDownload() {
        isCancelled = true
    }
}

struct GeneralSettingsView: View {
    @StateObject private var viewModel: GeneralSettingsViewModel
    @State private var showHelperAlert = false
    @State private var helperAlertMessage = ""
    @State private var helperAlertSuccess = false
    @EnvironmentObject private var networkManager: NetworkManager

    init(updater: SPUUpdater) {
        _viewModel = StateObject(wrappedValue: GeneralSettingsViewModel(updater: updater))
    }

    var body: some View {
        Form {
            DownloadSettingsView(viewModel: viewModel)
            HelperSettingsView(viewModel: viewModel,
                            showHelperAlert: $showHelperAlert,
                            helperAlertMessage: $helperAlertMessage,
                            helperAlertSuccess: $helperAlertSuccess)
            CCSettingsView(viewModel: viewModel)
            UpdateSettingsView(viewModel: viewModel)
            CleanConfigView()
        }
        .padding()
        .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .top)
        .alert(helperAlertSuccess ? "Êìç‰ΩúÊàêÂäü" : "Êìç‰ΩúÂ§±Ë¥•", isPresented: $showHelperAlert) {
            Button("Á°ÆÂÆö") { }
        } message: {
            Text(helperAlertMessage)
        }
        .alert("ÈúÄË¶Å‰∏ãËΩΩ Setup ÁªÑ‰ª∂", isPresented: $viewModel.showDownloadAlert) {
            Button("ÂèñÊ∂à", role: .cancel) { }
            Button("‰∏ãËΩΩ") {
                Task {
                    viewModel.isDownloadingSetup = true
                    viewModel.isCancelled = false
                    do {
                        try await networkManager.downloadUtils.downloadX1a0HeCCPackages(
                            progressHandler: { progress, status in
                                viewModel.setupDownloadProgress = progress
                                viewModel.setupDownloadStatus = status
                            },
                            cancellationHandler: { viewModel.isCancelled }
                        )
                        viewModel.setupVersion = ModifySetup.checkComponentVersion()
                        viewModel.isSuccess = true
                        viewModel.alertMessage = String(localized: "Setup ÁªÑ‰ª∂ÂÆâË£ÖÊàêÂäü")
                    } catch NetworkError.cancelled {
                        viewModel.isSuccess = false
                        viewModel.alertMessage = String(localized: "‰∏ãËΩΩÂ∑≤ÂèñÊ∂à")
                    } catch {
                        viewModel.isSuccess = false
                        viewModel.alertMessage = error.localizedDescription
                    }
                    viewModel.showAlert = true
                    viewModel.isDownloadingSetup = false
                }
            }
        } message: {
            Text("Ê£ÄÊµãÂà∞Á≥ªÁªü‰∏≠‰∏çÂ≠òÂú® Setup ÁªÑ‰ª∂ÔºåÈúÄË¶ÅÂÖà‰∏ãËΩΩÁªÑ‰ª∂ÊâçËÉΩÁªßÁª≠Êìç‰Ωú„ÄÇ")
        }
        .alert("Á°ÆËÆ§‰∏ãËΩΩÂπ∂Â§ÑÁêÜ", isPresented: $viewModel.showDownloadConfirmAlert) {
            Button("ÂèñÊ∂à", role: .cancel) { }
            Button("Á°ÆÂÆö") {
                Task {
                    viewModel.isDownloadingSetup = true
                    viewModel.isCancelled = false
                    do {
                        try await networkManager.downloadUtils.downloadX1a0HeCCPackages(
                            progressHandler: { progress, status in
                                viewModel.setupDownloadProgress = progress
                                viewModel.setupDownloadStatus = status
                            },
                            cancellationHandler: { viewModel.isCancelled },
                            shouldProcess: true
                        )
                        viewModel.setupVersion = ModifySetup.checkComponentVersion()
                        viewModel.isSuccess = true
                        viewModel.alertMessage = String(localized: "X1a0He CC ‰∏ãËΩΩÂπ∂Â§ÑÁêÜÊàêÂäü")
                    } catch NetworkError.cancelled {
                        viewModel.isSuccess = false
                        viewModel.alertMessage = String(localized: "‰∏ãËΩΩÂ∑≤ÂèñÊ∂à")
                    } catch {
                        viewModel.isSuccess = false
                        viewModel.alertMessage = error.localizedDescription
                    }
                    viewModel.showAlert = true
                    viewModel.isDownloadingSetup = false
                }
            }
        } message: {
            Text("Á°ÆÂÆöË¶Å‰∏ãËΩΩÂπ∂Â§ÑÁêÜ X1a0He CC ÂêóÔºüËøôÂ∞ÜÂÆåÊàê‰∏ãËΩΩÂπ∂Ëá™Âä®ÂØπ Setup ÁªÑ‰ª∂ËøõË°åÂ§ÑÁêÜ")
        }
        .alert("Á°ÆËÆ§‰∏ãËΩΩ", isPresented: $viewModel.showReprocessConfirmAlert) {
            Button("ÂèñÊ∂à", role: .cancel) { }
            Button("Á°ÆÂÆö") {
                Task {
                    viewModel.isDownloadingSetup = true
                    viewModel.isCancelled = false
                    do {
                        try await networkManager.downloadUtils.downloadX1a0HeCCPackages(
                            progressHandler: { progress, status in
                                viewModel.setupDownloadProgress = progress
                                viewModel.setupDownloadStatus = status
                            },
                            cancellationHandler: { viewModel.isCancelled },
                            shouldProcess: false
                        )
                        viewModel.setupVersion = ModifySetup.checkComponentVersion()
                        viewModel.isSuccess = true
                        viewModel.alertMessage = String(localized: "X1a0He CC ‰∏ãËΩΩÊàêÂäü")
                    } catch NetworkError.cancelled {
                        viewModel.isSuccess = false
                        viewModel.alertMessage = String(localized: "‰∏ãËΩΩÂ∑≤ÂèñÊ∂à")
                    } catch {
                        viewModel.isSuccess = false
                        viewModel.alertMessage = error.localizedDescription
                    }
                    viewModel.showAlert = true
                    viewModel.isDownloadingSetup = false
                }
            }
        } message: {
            Text("Á°ÆÂÆöË¶Å‰∏ãËΩΩ X1a0He CC ÂêóÔºü‰∏ãËΩΩÂÆåÊàêÂêéÈúÄË¶ÅÊâãÂä®Â§ÑÁêÜ„ÄÇ")
        }
        .alert(viewModel.isSuccess ? "Êìç‰ΩúÊàêÂäü" : "Êìç‰ΩúÂ§±Ë¥•", isPresented: $viewModel.showAlert) {
            Button("Á°ÆÂÆö") { }
        } message: {
            Text(viewModel.alertMessage)
        }
        .task {
            viewModel.setupVersion = ModifySetup.checkComponentVersion()
        }
        .onReceive(NotificationCenter.default.publisher(for: .storageDidChange)) { _ in
            viewModel.objectWillChange.send()
        }
    }
}

struct DownloadSettingsView: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        GroupBox(label: Text("‰∏ãËΩΩËÆæÁΩÆ").padding(.bottom, 8)) {
            VStack(alignment: .leading, spacing: 12) {
                LanguageSettingRow(viewModel: viewModel)
                Divider()
                DirectorySettingRow(viewModel: viewModel)
                Divider()
                RedownloadConfirmRow(viewModel: viewModel)
                Divider()
                ArchitectureSettingRow(viewModel: viewModel)
            }
            .padding(8)
        }
    }
}

struct HelperSettingsView: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel
    @Binding var showHelperAlert: Bool
    @Binding var helperAlertMessage: String
    @Binding var helperAlertSuccess: Bool

    var body: some View {
        GroupBox(label: Text("Helper ËÆæÁΩÆ").padding(.bottom, 8)) {
            VStack(alignment: .leading, spacing: 12) {
                HelperStatusRow(viewModel: viewModel, showHelperAlert: $showHelperAlert,
                              helperAlertMessage: $helperAlertMessage,
                              helperAlertSuccess: $helperAlertSuccess)
            }
            .padding(8)
        }
    }
}

struct CCSettingsView: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        GroupBox(label: Text("X1a0He CCËÆæÁΩÆ").padding(.bottom, 8)) {
            VStack(alignment: .leading, spacing: 12) {
                SetupComponentRow(viewModel: viewModel)
            }
            .padding(8)
        }
    }
}

struct UpdateSettingsView: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel
    private var appVersion: String {
        Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "Unknown"
    }
    private var buildVersion: String {
        Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "Unknown"
    }

    var body: some View {
        GroupBox(label: Text("Êõ¥Êñ∞ËÆæÁΩÆ").padding(.bottom, 8)) {
            VStack(alignment: .leading, spacing: 12) {
                HStack {
                    Text("ÂΩìÂâçÁâàÊú¨Ôºö")
                        .foregroundColor(.secondary)
                    Text(appVersion)
                    Text("(\(buildVersion))")
                        .foregroundColor(.secondary)
                }
                .font(.system(size: 12))
                
                Divider()
                
                AutoUpdateRow(viewModel: viewModel)
                Divider()
                AutoDownloadRow(viewModel: viewModel)
            }
            .padding(8)
        }
    }
}

struct CleanConfigView: View {
    @State private var showConfirmation = false
    @State private var showAlert = false
    @State private var alertMessage = ""
    
    var body: some View {
        GroupBox(label: Text("ÈáçÁΩÆÁ®ãÂ∫è").padding(.bottom, 8)) {
            VStack(alignment: .leading, spacing: 12) {
                HStack {
                    Button("ÈáçÁΩÆÁ®ãÂ∫è") {
                        showConfirmation = true
                    }
                    .buttonStyle(.borderedProminent)
                    .tint(.red)
                }
            }
            .padding(8)
        }
        .alert("Á°ÆËÆ§ÈáçÁΩÆÁ®ãÂ∫è", isPresented: $showConfirmation) {
            Button("ÂèñÊ∂à", role: .cancel) { }
            Button("Á°ÆÂÆö", role: .destructive) {
                cleanConfig()
            }
        } message: {
            Text("ËøôÂ∞ÜÊ∏ÖÁ©∫ÊâÄÊúâÈÖçÁΩÆÂπ∂ÁªìÊùüÂ∫îÁî®Á®ãÂ∫èÔºåÁ°ÆÂÆöË¶ÅÁªßÁª≠ÂêóÔºü")
        }
        .alert("Êìç‰ΩúÁªìÊûú", isPresented: $showAlert) {
            Button("Á°ÆÂÆö") { }
        } message: {
            Text(alertMessage)
        }
    }
    
    private func cleanConfig() {
        do {
            let downloadsURL = try FileManager.default.url(for: .downloadsDirectory, 
                                                         in: .userDomainMask, 
                                                         appropriateFor: nil, 
                                                         create: false)
            let scriptURL = downloadsURL.appendingPathComponent("clean-config.sh")
            
            guard let scriptPath = Bundle.main.path(forResource: "clean-config", ofType: "sh"),
                  let scriptContent = try? String(contentsOfFile: scriptPath, encoding: .utf8) else {
                throw NSError(domain: "ScriptError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Êó†Ê≥ïËØªÂèñËÑöÊú¨Êñá‰ª∂"])
            }
            
            try scriptContent.write(to: scriptURL, atomically: true, encoding: .utf8)
            
            try FileManager.default.setAttributes([.posixPermissions: 0o755], 
                                                ofItemAtPath: scriptURL.path)
            
            if PrivilegedHelperManager.getHelperStatus {
                PrivilegedHelperManager.shared.executeCommand("open -a Terminal \(scriptURL.path)") { output in
                    if output.isEmpty {
                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                            exit(0)
                        }
                    } else {
                        alertMessage = "Ê∏ÖÁ©∫ÈÖçÁΩÆÂ§±Ë¥•: \(output)"
                        showAlert = true
                    }
                }
            } else {
                let terminalURL = URL(fileURLWithPath: "/System/Applications/Utilities/Terminal.app")
                NSWorkspace.shared.open([scriptURL], 
                                        withApplicationAt: terminalURL,
                                           configuration: NSWorkspace.OpenConfiguration()) { _, error in
                    if let error = error {
                        alertMessage = "ÊâìÂºÄÁªàÁ´ØÂ§±Ë¥•: \(error.localizedDescription)"
                        showAlert = true
                        return
                    }
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                        exit(0)
                    }
                }
            }
            
        } catch {
            alertMessage = "Ê∏ÖÁ©∫ÈÖçÁΩÆÂ§±Ë¥•: \(error.localizedDescription)"
            showAlert = true
        }
    }
}

private class PreviewUpdater: SPUUpdater {
    init() {
        let hostBundle = Bundle.main
        let applicationBundle = Bundle.main
        let userDriver = SPUStandardUserDriver(hostBundle: hostBundle, delegate: nil)
        
        super.init(
            hostBundle: hostBundle,
            applicationBundle: applicationBundle,
            userDriver: userDriver,
            delegate: nil
        )
    }
    
    override var automaticallyChecksForUpdates: Bool {
        get { true }
        set { }
    }
    
    override var automaticallyDownloadsUpdates: Bool {
        get { true }
        set { }
    }
}

struct LanguageSettingRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        HStack {
            Toggle("‰ΩøÁî®ÈªòËÆ§ËØ≠Ë®Ä", isOn: Binding(
                get: { viewModel.useDefaultLanguage },
                set: { viewModel.useDefaultLanguage = $0 }
            ))
                .padding(.leading, 5)
            Spacer()
            Text(getLanguageName(code: viewModel.defaultLanguage))
                .foregroundColor(.secondary)
            Button("ÈÄâÊã©") {
                viewModel.showLanguagePicker = true
            }
            .padding(.trailing, 5)
        }
        .sheet(isPresented: $viewModel.showLanguagePicker) {
            LanguagePickerView(languages: AppStatics.supportedLanguages) { language in
                viewModel.defaultLanguage = language
                viewModel.showLanguagePicker = false
            }
        }
    }

    private func getLanguageName(code: String) -> String {
        AppStatics.supportedLanguages.first { $0.code == code }?.name ?? code
    }
}

struct DirectorySettingRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        HStack {
            Toggle("‰ΩøÁî®ÈªòËÆ§ÁõÆÂΩï", isOn: $viewModel.useDefaultDirectory)
                .padding(.leading, 5)
            Spacer()
            Text(formatPath(viewModel.defaultDirectory))
                .foregroundColor(.secondary)
                .lineLimit(1)
                .truncationMode(.middle)
            Button("ÈÄâÊã©") {
                selectDirectory()
            }
            .padding(.trailing, 5)
        }
    }

    private func formatPath(_ path: String) -> String {
        if path.isEmpty { return String(localized: "Êú™ËÆæÁΩÆ") }
        return URL(fileURLWithPath: path).lastPathComponent
    }

    private func selectDirectory() {
        let panel = NSOpenPanel()
        panel.title = "ÈÄâÊã©ÈªòËÆ§‰∏ãËΩΩÁõÆÂΩï"
        panel.canCreateDirectories = true
        panel.canChooseDirectories = true
        panel.canChooseFiles = false

        if panel.runModal() == .OK {
            viewModel.defaultDirectory = panel.url?.path ?? ""
            viewModel.useDefaultDirectory = true
        }
    }
}

struct RedownloadConfirmRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        HStack {
            Toggle("ÈáçÊñ∞‰∏ãËΩΩÊó∂ÈúÄË¶ÅÁ°ÆËÆ§", isOn: $viewModel.confirmRedownload)
                .padding(.leading, 5)
            Spacer()
        }
    }
}

struct ArchitectureSettingRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel
    @EnvironmentObject private var networkManager: NetworkManager

    var body: some View {
        HStack {
            Toggle("‰∏ãËΩΩ Apple Silicon Êû∂ÊûÑ", isOn: $viewModel.downloadAppleSilicon)
                .padding(.leading, 5)
                .disabled(networkManager.loadingState == .loading)
            Spacer()
            Text("ÂΩìÂâçÊû∂ÊûÑ: \(AppStatics.cpuArchitecture)")
                .foregroundColor(.secondary)
                .lineLimit(1)
                .truncationMode(.middle)
        }
        .onChange(of: viewModel.downloadAppleSilicon) { newValue in
            Task {
                await networkManager.fetchProducts()
            }
        }
    }
}

struct HelperStatusRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel
    @Binding var showHelperAlert: Bool
    @Binding var helperAlertMessage: String
    @Binding var helperAlertSuccess: Bool
    @State private var isReinstallingHelper = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text("Helper Áä∂ÊÄÅ: ")
                if PrivilegedHelperManager.getHelperStatus {
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.green)
                    Text("Â∑≤ÂÆâË£Ö (build \(UserDefaults.standard.string(forKey: "InstalledHelperBuild") ?? "0"))")
                } else {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.red)
                    Text("Êú™ÂÆâË£Ö")
                        .foregroundColor(.red)
                }
                Spacer()
                
                if isReinstallingHelper {
                    ProgressView()
                        .scaleEffect(0.7)
                        .frame(width: 16, height: 16)
                }
                
                Button(action: {
                    isReinstallingHelper = true
                    PrivilegedHelperManager.shared.removeInstallHelper()
                    PrivilegedHelperManager.shared.reinstallHelper { success, message in
                        helperAlertSuccess = success
                        helperAlertMessage = message
                        showHelperAlert = true
                        isReinstallingHelper = false
                    }
                }) {
                    Text("ÈáçÊñ∞ÂÆâË£Ö")
                }
                .disabled(isReinstallingHelper)
                .help("ÂÆåÂÖ®Âç∏ËΩΩÂπ∂ÈáçÊñ∞ÂÆâË£Ö Helper")
            }
            
            if !PrivilegedHelperManager.getHelperStatus {
                Text("Helper Êú™ÂÆâË£ÖÂ∞ÜÂØºËá¥Êó†Ê≥ïÊâßË°åÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÁöÑÊìç‰Ωú")
                    .font(.caption)
                    .foregroundColor(.red)
            }
            
            Divider()

            HStack {
                Text("Helper ËøûÊé•Áä∂ÊÄÅ: ")
                PulsingCircle(color: helperStatusColor)
                    .padding(.horizontal, 4)
                Text(helperStatusText)
                    .foregroundColor(helperStatusColor)
                
                Spacer()
                
                Button(action: {
                    if PrivilegedHelperManager.getHelperStatus && 
                       viewModel.helperConnectionStatus != .connected {
                        PrivilegedHelperManager.shared.reconnectHelper { success, message in
                            helperAlertSuccess = success
                            helperAlertMessage = message
                            showHelperAlert = true
                        }
                    }
                }) {
                    Text("ÈáçÊñ∞ËøûÊé•")
                }
                .disabled(!PrivilegedHelperManager.getHelperStatus || 
                         viewModel.helperConnectionStatus == .connected ||
                         isReinstallingHelper)
                .help("Â∞ùËØïÈáçÊñ∞ËøûÊé•Âà∞Â∑≤ÂÆâË£ÖÁöÑ Helper")
            }
        }
    }
    
    private var helperStatusColor: Color {
        switch viewModel.helperConnectionStatus {
        case .connected: return .green
        case .connecting: return .orange
        case .disconnected: return .red
        case .checking: return .orange
        }
    }
    
    private var helperStatusText: String {
        switch viewModel.helperConnectionStatus {
        case .connected: return String(localized: "ËøêË°åÊ≠£Â∏∏")
        case .connecting: return String(localized: "Ê≠£Âú®ËøûÊé•")
        case .disconnected: return String(localized: "ËøûÊé•Êñ≠ÂºÄ")
        case .checking: return String(localized: "Ê£ÄÊü•‰∏≠")
        }
    }
}

struct SetupComponentRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text("X1a0He CC Â§á‰ªΩÁä∂ÊÄÅ: ")
                #if DEBUG
                Image(systemName: "ladybug.fill")
                    .foregroundColor(.yellow)
                Text("Debug Ê®°Âºè")
                #else
                if ModifySetup.isSetupBackup() {
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.green)
                    Text("Â∑≤Â§á‰ªΩ")
                } else {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.red)
                    Text("(ÂèØËÉΩÂØºËá¥Â§ÑÁêÜ Setup ÁªÑ‰ª∂Â§±Ë¥•)")
                }
                #endif
            }
            Divider()
            HStack {
                Text("X1a0He CC Â§ÑÁêÜÁä∂ÊÄÅ: ")
                #if DEBUG
                Image(systemName: "ladybug.fill")
                    .foregroundColor(.yellow)
                Text("Debug Ê®°Âºè")
                #else
                if ModifySetup.isSetupModified() {
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.green)
                    Text("Â∑≤Â§ÑÁêÜ")
                } else {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.red)
                    Text("(Â∞ÜÂØºËá¥Êó†Ê≥ï‰ΩøÁî®ÂÆâË£ÖÂäüËÉΩ)")
                }
                #endif
                Spacer()

                Button(action: {
                    if !ModifySetup.isSetupExists() {
                        viewModel.showDownloadAlert = true
                    } else {
                        viewModel.showReprocessConfirmAlert = true
                    }
                }) {
                    Text("ÈáçÊñ∞Â§ÑÁêÜ")
                }
            }
            Divider()
            HStack {
                Text("X1a0He CC ÁâàÊú¨‰ø°ÊÅØ: ")
                Image(systemName: "info.circle.fill")
                    .foregroundColor(.blue)
                Text("\(viewModel.setupVersion)")
                Text(" [\(AppStatics.cpuArchitecture)]")
                Spacer()

                if viewModel.isDownloadingSetup {
                    ProgressView(value: viewModel.setupDownloadProgress) {
                        Text(viewModel.setupDownloadStatus)
                            .font(.caption)
                    }
                    .frame(width: 150)
                    Button("ÂèñÊ∂à") {
                        viewModel.cancelDownload()
                    }
                } else {
                    Menu {
                        Button(action: {
                            viewModel.showDownloadConfirmAlert = true
                        }) {
                            Label("‰∏ãËΩΩÂπ∂Â§ÑÁêÜ", systemImage: "arrow.down.circle.fill")
                                .frame(maxWidth: .infinity, alignment: .leading)
                        }
                        
                        Button(action: {
                            viewModel.showReprocessConfirmAlert = true
                        }) {
                            Label("‰ªÖ‰∏ãËΩΩ", systemImage: "arrow.down")
                                .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    } label: {
                        Text("X1a0He CC ÈÄâÈ°π")
                            .frame(width: 100)
                    }
                    .menuStyle(.borderlessButton)
                    .fixedSize()
                    .help("ÈÄâÊã©‰∏ãËΩΩ X1a0He CC ÁöÑÊñπÂºè")
                }
            }
        }
    }
}

struct AutoUpdateRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        HStack {
            Toggle("Ëá™Âä®Ê£ÄÊü•Êõ¥Êñ∞ÁâàÊú¨", isOn: Binding(
                get: { viewModel.automaticallyChecksForUpdates },
                set: { viewModel.updateAutomaticallyChecksForUpdates($0) }
            ))
            Spacer()
            CheckForUpdatesView(updater: viewModel.updater)
        }
    }
}

struct AutoDownloadRow: View {
    @ObservedObject var viewModel: GeneralSettingsViewModel

    var body: some View {
        Toggle("Ëá™Âä®‰∏ãËΩΩÊúÄÊñ∞ÁâàÊú¨", isOn: Binding(
            get: { viewModel.automaticallyDownloadsUpdates },
            set: { viewModel.updateAutomaticallyDownloadsUpdates($0) }
        ))
        .disabled(viewModel.isAutomaticallyDownloadsUpdatesDisabled)
    }
}

struct QAView: View {
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                Group {
                    QAItem(
                        question: String(localized: "‰∏∫‰ªÄ‰πàÈúÄË¶ÅÂÆâË£Ö HelperÔºü"),
                        answer: String(localized: "Helper ÊòØ‰∏Ä‰∏™ÂÖ∑ÊúâÁÆ°ÁêÜÂëòÊùÉÈôêÁöÑËæÖÂä©Â∑•ÂÖ∑ÔºåÁî®‰∫éÊâßË°åÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÁöÑÊìç‰ΩúÔºåÂ¶Ç‰øÆÊîπÁ≥ªÁªüÊñá‰ª∂Á≠â„ÄÇÊ≤°Êúâ Helper Â∞ÜÊó†Ê≥ïÊ≠£Â∏∏‰ΩøÁî®ËΩØ‰ª∂ÁöÑÊüê‰∫õÂäüËÉΩ„ÄÇ")
                    )
                    
                    QAItem(
                        question: String(localized: "‰∏∫‰ªÄ‰πàÈúÄË¶Å‰∏ãËΩΩ Setup ÁªÑ‰ª∂Ôºü"),
                        answer: String(localized: "Setup ÁªÑ‰ª∂ÊòØ Adobe ÂÆòÊñπÁöÑÂÆâË£ÖÁ®ãÂ∫èÁªÑ‰ª∂ÔºåÊàë‰ª¨ÈúÄË¶ÅÂØπÂÖ∂ËøõË°å‰øÆÊîπ‰ª•ÂÆûÁé∞ÁªïËøáÈ™åËØÅÁöÑÂäüËÉΩ„ÄÇÂ¶ÇÊûúÊ≤°Êúâ‰∏ãËΩΩÂπ∂Â§ÑÁêÜ Setup ÁªÑ‰ª∂ÔºåÂ∞ÜÊó†Ê≥ï‰ΩøÁî®ÂÆâË£ÖÂäüËÉΩ„ÄÇ")
                    )
                    
                    QAItem(
                        question: String(localized: "‰∏∫‰ªÄ‰πàÊúâÊó∂ÂÄô‰∏ãËΩΩ‰ºöÂ§±Ë¥•Ôºü"),
                        answer: String(localized: "‰∏ãËΩΩÂ§±Ë¥•ÂèØËÉΩÊúâÂ§öÁßçÂéüÂõ†Ôºö\n1. ÁΩëÁªúËøûÊé•‰∏çÁ®≥ÂÆö\n2. Adobe ÊúçÂä°Âô®ÂìçÂ∫îË∂ÖÊó∂\n3. Êú¨Âú∞Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥\nÂª∫ËÆÆÊÇ®Ê£ÄÊü•ÁΩëÁªúËøûÊé•Âπ∂ÈáçËØïÔºåÂ¶ÇÊûúÈóÆÈ¢òÊåÅÁª≠Â≠òÂú®ÔºåÂèØ‰ª•Â∞ùËØï‰ΩøÁî®‰ª£ÁêÜÊàñ VPN„ÄÇ")
                    )
                    
                    QAItem(
                        question: String(localized: "Â¶Ç‰Ωï‰øÆÂ§çÂÆâË£ÖÂ§±Ë¥•ÁöÑÈóÆÈ¢òÔºü"),
                        answer: String(localized: "Â¶ÇÊûúÂÆâË£ÖÂ§±Ë¥•ÔºåÊÇ®ÂèØ‰ª•Â∞ùËØï‰ª•‰∏ãÊ≠•È™§Ôºö\n1. Á°Æ‰øùÂ∑≤Ê≠£Á°ÆÂÆâË£ÖÂπ∂ËøûÊé• Helper\n2. Á°Æ‰øùÂ∑≤‰∏ãËΩΩÂπ∂Â§ÑÁêÜ Setup ÁªÑ‰ª∂\n3. Ê£ÄÊü•Á£ÅÁõòÂâ©‰ΩôÁ©∫Èó¥ÊòØÂê¶ÂÖÖË∂≥\n4. Â∞ùËØïÈáçÊñ∞‰∏ãËΩΩÂπ∂ÂÆâË£Ö\nÂ¶ÇÊûúÈóÆÈ¢ò‰ªçÁÑ∂Â≠òÂú®ÔºåÂèØ‰ª•Â∞ùËØïÈáçÊñ∞ÂÆâË£Ö Helper ÂíåÈáçÊñ∞Â§ÑÁêÜ Setup ÁªÑ‰ª∂„ÄÇ")
                    )
                    
                    QAItem(
                        question: String(localized: "‰∏∫‰ªÄ‰πàÊàëÂÆâË£ÖÁöÑÊó∂ÂÄô‰ºöÈÅáÂà∞ÈîôËØØ‰ª£Á†ÅÔºåÈîôËØØ‰ª£Á†ÅË°®Á§∫‰ªÄ‰πàÊÑèÊÄùÔºü"),
                        answer: String(localized: "‚Ä¢ ÈîôËØØ 2700Ôºö‰∏çÂ§™ÂèØËÉΩ‰ºöÂá∫Áé∞ÔºåÈô§Èùû Setup ÁªÑ‰ª∂Â§ÑÁêÜÂ§±Ë¥•‰∫Ü\n‚Ä¢ ÈîôËØØ 107ÔºöÊâÄ‰∏ãËΩΩÁöÑÊñá‰ª∂Êû∂ÊûÑ‰∏éÁ≥ªÁªüÊû∂ÊûÑ‰∏ç‰∏ÄËá¥ÊàñËÄÖÂÆâË£ÖÊñá‰ª∂Ë¢´ÊçüÂùè\n‚Ä¢ ÈîôËØØ 103ÔºöÂá∫Áé∞ÊùÉÈôêÈóÆÈ¢òÔºåËØ∑Á°Æ‰øù Helper Áä∂ÊÄÅÊ≠£Â∏∏\n‚Ä¢ ÈîôËØØ 182ÔºöÊñá‰ª∂‰∏çÈΩêÂÖ®ÊàñÊñá‰ª∂Ë¢´ÊçüÂùèÔºåÊàñËÄÖ‰Ω†ÁöÑSetupÁªÑ‰ª∂‰∏ç‰∏ÄËá¥ÔºåËØ∑ÈáçÊñ∞‰∏ãËΩΩ X1a0He CC\n‚Ä¢ ÈîôËØØ 133ÔºöÁ≥ªÁªüÁ£ÅÁõòÁ©∫Èó¥‰∏çË∂≥\n‚Ä¢ ÈîôËØØ -1ÔºöSetup ÁªÑ‰ª∂Êú™Â§ÑÁêÜÊàñÂ§ÑÁêÜÂ§±Ë¥•ÔºåËØ∑ËÅîÁ≥ªÂºÄÂèëËÄÖ\n‚Ä¢ ÈîôËØØ 195ÔºöÊâÄ‰∏ãËΩΩÁöÑ‰∫ßÂìÅ‰∏çÊîØÊåÅ‰Ω†ÂΩìÂâçÁöÑÁ≥ªÁªü\n‚Ä¢ ÈîôËØØ 146ÔºöËØ∑Âú® Mac Á≥ªÁªüËÆæÁΩÆ‰∏≠Áªô‰∫à Adobe Downloader ÂÖ®Á£ÅÁõòÊùÉÈôê\n‚Ä¢ ÈîôËØØ 255ÔºöSetup ÁªÑ‰ª∂ÈúÄË¶ÅÊõ¥Êñ∞ÔºåËØ∑ËÅîÁ≥ªÂºÄÂèëËÄÖËß£ÂÜ≥")
                    )
                }
            }
            .padding()
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
}

struct QAItem: View {
    let question: String
    let answer: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(question)
                .font(.headline)
                .foregroundColor(.primary)
            
            Text(answer)
                .font(.body)
                .foregroundColor(.secondary)
                .fixedSize(horizontal: false, vertical: true)
            
            Divider()
        }
    }
}

struct CleanupLog: Identifiable {
    let id = UUID()
    let timestamp: Date
    let command: String
    let status: LogStatus
    let message: String
    
    enum LogStatus {
        case running
        case success
        case error
        case cancelled
    }
    
    static func getCleanupDescription(for command: String) -> String {
        if command.contains("Library/Logs") || command.contains("DiagnosticReports") {
            if command.contains("Adobe Creative Cloud") {
                return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜ Creative Cloud Êó•ÂøóÊñá‰ª∂...")
            } else if command.contains("CrashReporter") {
                return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÂ¥©Ê∫ÉÊä•ÂëäÊó•Âøó...")
            } else {
                return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÂ∫îÁî®Á®ãÂ∫èÊó•ÂøóÊñá‰ª∂...")
            }
        } else if command.contains("Library/Caches") {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÁºìÂ≠òÊñá‰ª∂...")
        } else if command.contains("Library/Preferences") {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÂÅèÂ•ΩËÆæÁΩÆÊñá‰ª∂...")
        } else if command.contains("Applications") {
            if command.contains("Creative Cloud") {
                return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜ Creative Cloud Â∫îÁî®...")
            } else {
                return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜ Adobe Â∫îÁî®Á®ãÂ∫è...")
            }
        } else if command.contains("LaunchAgents") || command.contains("LaunchDaemons") {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÂêØÂä®È°πÊúçÂä°...")
        } else if command.contains("security") {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÈí•Âåô‰∏≤Êï∞ÊçÆ...")
        } else if command.contains("AdobeGenuineClient") || command.contains("AdobeGCClient") {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÊ≠£ÁâàÈ™åËØÅÊúçÂä°...")
        } else if command.contains("hosts") {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜ hosts Êñá‰ª∂...")
        } else if command.contains("kill") {
            return String(localized: "Ê≠£Âú®ÂÅúÊ≠¢ Adobe Áõ∏ÂÖ≥ËøõÁ®ã...")
        } else if command.contains("receipts") {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÂÆâË£ÖËÆ∞ÂΩï...")
        } else {
            return String(localized: "Ê≠£Âú®Ê∏ÖÁêÜÂÖ∂‰ªñÊñá‰ª∂...")
        }
    }
}

struct CleanupView: View {
    @State private var showConfirmation = false
    @State private var showAlert = false
    @State private var alertMessage = ""
    @State private var selectedOptions = Set<CleanupOption>()
    @State private var isProcessing = false
    @State private var cleanupLogs: [CleanupLog] = []
    @State private var currentCommandIndex = 0
    @State private var totalCommands = 0
    @State private var expandedOptions = Set<CleanupOption>()
    @State private var isCancelled = false
    @State private var isLogExpanded = false
    
    enum CleanupOption: String, CaseIterable, Identifiable {
        case adobeApps = "Adobe Â∫îÁî®Á®ãÂ∫è"
        case adobeCreativeCloud = "Adobe Creative Cloud"
        case adobePreferences = "Adobe ÂÅèÂ•ΩËÆæÁΩÆ"
        case adobeCaches = "Adobe ÁºìÂ≠òÊñá‰ª∂"
        case adobeLicenses = "Adobe ËÆ∏ÂèØÊñá‰ª∂"
        case adobeLogs = "Adobe Êó•ÂøóÊñá‰ª∂"
        case adobeServices = "Adobe ÊúçÂä°"
        case adobeKeychain = "Adobe Èí•Âåô‰∏≤"
        case adobeGenuineService = "Adobe Ê≠£ÁâàÈ™åËØÅÊúçÂä°"
        case adobeHosts = "Adobe Hosts"
        
        var id: String { self.rawValue }
        
        var localizedName: String {
            switch self {
            case .adobeApps:
                return String(localized: "Adobe Â∫îÁî®Á®ãÂ∫è")
            case .adobeCreativeCloud:
                return String(localized: "Adobe Creative Cloud")
            case .adobePreferences:
                return String(localized: "Adobe ÂÅèÂ•ΩËÆæÁΩÆ")
            case .adobeCaches:
                return String(localized: "Adobe ÁºìÂ≠òÊñá‰ª∂")
            case .adobeLicenses:
                return String(localized: "Adobe ËÆ∏ÂèØÊñá‰ª∂")
            case .adobeLogs:
                return String(localized: "Adobe Êó•ÂøóÊñá‰ª∂")
            case .adobeServices:
                return String(localized: "Adobe ÊúçÂä°")
            case .adobeKeychain:
                return String(localized: "Adobe Èí•Âåô‰∏≤")
            case .adobeGenuineService:
                return String(localized: "Adobe Ê≠£ÁâàÈ™åËØÅÊúçÂä°")
            case .adobeHosts:
                return String(localized: "Adobe Hosts")
            }
        }
        
        var commands: [String] {
            switch self {
            case .adobeApps:
                return [
                    "sudo find /Applications -name 'Adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo find /Applications/Utilities -name 'Adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo rm -rf /Applications/Adobe Creative Cloud",
                    "sudo rm -rf /Applications/Utilities/Adobe Creative Cloud",
                    "sudo rm -rf /Applications/Utilities/Adobe Creative Cloud Experience",
                    "sudo rm -rf /Applications/Utilities/Adobe Installers/Uninstall Adobe Creative Cloud",
                    "sudo rm -rf /Applications/Utilities/Adobe Sync",
                    "sudo rm -rf /Applications/Utilities/Adobe Genuine Service"
                ]
            case .adobeCreativeCloud:
                return [
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/ADBox",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/ADS",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/AppsPanel",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/CEF",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/Core",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/CoreExt",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/DEBox",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/ElevationManager",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/FilesPanel",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/FontsPanel",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/HEX",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/LCC",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/NHEX",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/Notifications",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/pim.db",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/RemoteComponents",
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/TCC",
                    "sudo rm -rf /Library/Application Support/Adobe/ARMNext",
                    "sudo rm -rf /Library/Application Support/Adobe/ARMDC/Application",
                    "sudo rm -rf /Library/Application Support/Adobe/PII/com.adobe.pii.prefs",
                    "sudo rm -rf /Library/Application Support/Adobe/ACPLocal*",
                    "sudo rm -rf /Library/Application Support/regid.1986-12.com.adobe",
                    "sudo rm -rf /Library/Internet Plug-Ins/AdobeAAMDetect.plugin",
                    "sudo rm -rf /Library/Internet Plug-Ins/AdobePDF*",
                    "sudo rm -rf /Library/PDF Services/Save as Adobe PDF*",
                    "sudo rm -rf /Library/ScriptingAdditions/Adobe Unit Types.osax",
                    "sudo rm -rf /Library/Automator/Save as Adobe PDF.action",
                    "sudo rm -rf ~/.adobe",
                    "sudo rm -rf ~/Creative Cloud Files*",
                    "sudo find ~/Library/Application\\ Scripts -name '*com.adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo find ~/Library/Group\\ Containers -name '*com.adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo rm -rf ~/Library/Application\\ Scripts/Adobe-Hub-App || true",
                    "sudo rm -rf ~/Library/Group\\ Containers/Adobe-Hub-App || true",
                    "sudo rm -rf ~/Library/Application\\ Support/com.apple.sharedfilelist/com.apple.LSSharedFileList.ApplicationRecentDocuments/com.adobe* || true",
                    "sudo find ~/Library/Application\\ Support -name 'Acrobat*' ! -path '*/Adobe Downloader/*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo find ~/Library/Application\\ Support -name 'Adobe*' ! -name '*Adobe Downloader*' ! -path '*/Adobe Downloader/*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo find ~/Library/Application\\ Support -name 'com.adobe*' ! -name '*Adobe Downloader*' ! -path '*/Adobe Downloader/*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo rm -rf ~/Library/Application Support/io.branch",
                    "sudo rm -rf ~/Library/PhotoshopCrashes",
                    "sudo rm -rf ~/Library/WebKit/com.adobe*"
                ]
            case .adobePreferences:
                return [
                    "sudo find /Library/Preferences -name 'com.adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo find ~/Library/Preferences -name 'com.adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo find ~/Library/Preferences -name 'Adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo find ~/Library/Preferences/ByHost -name 'com.adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo rm -rf ~/Library/Preferences/adobe.com*",
                    "sudo rm -rf ~/Library/Preferences/AIRobin*",
                    "sudo rm -rf ~/Library/Preferences/Macromedia*",
                    "sudo rm -rf ~/Library/Saved Application State/com.adobe*"
                ]
            case .adobeCaches:
                return [
                    "sudo find ~/Library/Caches -name 'Adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo find ~/Library/Caches -name 'com.adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo rm -rf ~/Library/Caches/Acrobat* || true",
                    "sudo rm -rf ~/Library/Caches/CSXS || true",
                    "sudo rm -rf ~/Library/Caches/com.crashlytics.data/com.adobe* || true",
                    "sudo rm -rf ~/Library/Containers/com.adobe* || true",
                    "sudo rm -rf ~/Library/Cookies/com.adobe* || true",
                    "sudo find ~/Library/HTTPStorages -name '*Adobe*' ! -name '*Adobe Downloader*' ! -name '*com.x1a0he.macOS.Adobe-Downloader*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo find ~/Library/HTTPStorages -name 'com.adobe*' ! -name '*Adobe Downloader*' ! -name '*com.x1a0he.macOS.Adobe-Downloader*' -print0 | xargs -0 sudo rm -rf || true",
                    "sudo rm -rf ~/Library/HTTPStorages/Creative\\ Cloud\\ Content\\ Manager.node || true"
                ]
            case .adobeLicenses:
                return [
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe PCD",
                    "sudo rm -rf /Library/Application Support/Adobe/AdobeGCClient",
                    "sudo rm -rf /Library/Application Support/regid.1986-12.com.adobe",
                    "sudo rm -rf /private/var/db/receipts/com.adobe*",
                    "sudo rm -rf /private/var/db/receipts/*Photoshop*",
                    "sudo rm -rf /private/var/db/receipts/*CreativeCloud*",
                    "sudo rm -rf /private/var/db/receipts/*CCXP*",
                    "sudo rm -rf /private/var/db/receipts/*mygreatcompany*",
                    "sudo rm -rf /private/var/db/receipts/*AntiCC*",
                    "sudo rm -rf /private/var/db/receipts/*.RiD.*",
                    "sudo rm -rf /private/var/db/receipts/*.CCRuntime.*"
                ]
            case .adobeLogs:
                return [
                    "sudo find ~/Library/Logs -name 'Adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo find ~/Library/Logs -name 'adobe*' ! -name '*Adobe Downloader*' -print0 | xargs -0 sudo rm -rf",
                    "sudo rm -rf ~/Library/Logs/Adobe Creative Cloud Cleaner Tool.log",
                    "sudo rm -rf ~/Library/Logs/CreativeCloud",
                    "sudo rm -rf /Library/Logs/CreativeCloud",
                    "sudo rm -rf ~/Library/Logs/CSXS",
                    "sudo rm -rf ~/Library/Logs/amt3.log",
                    "sudo rm -rf ~/Library/Logs/CoreSyncInstall.log",
                    "sudo rm -rf ~/Library/Logs/CrashReporter/*Adobe*",
                    "sudo rm -rf ~/Library/Logs/acroLicLog.log",
                    "sudo rm -rf ~/Library/Logs/acroNGLLog.txt",
                    "sudo rm -rf ~/Library/Logs/DiagnosticReports/*Adobe*",
                    "sudo rm -rf ~/Library/Logs/distNGLLog.txt",
                    "sudo rm -rf ~/Library/Logs/NGL*",
                    "sudo rm -rf ~/Library/Logs/oobelib.log",
                    "sudo rm -rf ~/Library/Logs/PDApp*",
                    "sudo rm -rf /Library/Logs/adobe*",
                    "sudo rm -rf /Library/Logs/Adobe*",
                    "sudo rm -rf ~/Library/Logs/Adobe*",
                    "sudo rm -rf ~/Library/Logs/adobe*",
                    "sudo rm -rf /Library/Logs/DiagnosticReports/*Adobe*",
                    "sudo rm -rf /Library/Application Support/CrashReporter/*Adobe*",
                    "sudo rm -rf ~/Library/Application Support/CrashReporter/*Adobe*"
                ]
            case .adobeServices:
                return [
                    "sudo launchctl bootout gui/$(id -u) /Library/LaunchAgents/com.adobe.* || true",
                    "sudo launchctl bootout gui/$(id -u) ~/Library/LaunchAgents/com.adobe.* || true",
                    "sudo launchctl unload /Library/LaunchDaemons/com.adobe.* || true",
                    "sudo launchctl remove com.adobe.AdobeCreativeCloud || true",
                    "sudo launchctl remove com.adobe.AdobeGenuineService.plist || true",
                    "sudo ps aux | grep -i 'Adobe' | grep -v 'Adobe Downloader' | grep -v 'Adobe-Downloader.helper' | grep -v grep | awk '{print $2}' | { pids=$(cat); [ ! -z \"$pids\" ] && echo \"$pids\" | xargs sudo kill -9; } || true",
                    "sudo rm -rf /Library/LaunchAgents/com.adobe.*",
                    "sudo rm -rf /Library/LaunchDaemons/com.adobe.*",
                    "sudo rm -rf /Library/LaunchAgents/com.adobe.ARMDCHelper*",
                    "sudo rm -rf /Library/LaunchAgents/com.adobe.AdobeCreativeCloud.plist",
                    "sudo rm -rf /Library/LaunchAgents/com.adobe.ccxprocess.plist"
                ]
            case .adobeKeychain:
                return [
                    "sudo security dump-keychain /Library/Keychains/System.keychain | grep -i 'acrobat.com' | grep -i 'srvr' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do sudo security delete-internet-password -s \"$line\" /Library/Keychains/System.keychain; done || true",
                    "sudo security dump-keychain ~/Library/Keychains/login.keychain-db | grep -i 'acrobat.com' | grep -i 'srvr' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do security delete-internet-password -s \"$line\" ~/Library/Keychains/login.keychain-db; done || true",
                    "sudo security dump-keychain /Library/Keychains/System.keychain | grep -i 'Adobe.APS' | grep -v 'Adobe Downloader' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do sudo security delete-generic-password -l \"$line\" /Library/Keychains/System.keychain; done || true",
                    "sudo security dump-keychain ~/Library/Keychains/login.keychain-db | grep -i 'Adobe.APS' | grep -v 'Adobe Downloader' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do security delete-generic-password -l \"$line\" ~/Library/Keychains/login.keychain-db; done || true",
                    "sudo security dump-keychain /Library/Keychains/System.keychain | grep -i 'Adobe App Info\\|Adobe App Prefetched Info\\|Adobe User\\|com.adobe\\|Adobe Lightroom' | grep -v 'Adobe Downloader' | grep -i 'svce' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do sudo security delete-generic-password -s \"$line\" /Library/Keychains/System.keychain; done || true",
                    "sudo security dump-keychain ~/Library/Keychains/login.keychain-db | grep -i 'Adobe App Info\\|Adobe App Prefetched Info\\|Adobe User\\|com.adobe\\|Adobe Lightroom' | grep -v 'Adobe Downloader' | grep -i 'svce' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do security delete-generic-password -s \"$line\" ~/Library/Keychains/login.keychain-db; done || true",
                    "sudo security dump-keychain /Library/Keychains/System.keychain | grep -i 'Adobe Content \\|Adobe Intermediate' | grep -v 'Adobe Downloader' | grep -i 'alis' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do sudo security delete-certificate -c \"$line\" /Library/Keychains/System.keychain; done || true",
                    "sudo security dump-keychain ~/Library/Keychains/login.keychain-db | grep -i 'Adobe Content \\|Adobe Intermediate' | grep -v 'Adobe Downloader' | grep -i 'alis' | awk -F '=' '{print $2}' | cut -d '\"' -f2 | while read -r line; do security delete-certificate -c \"$line\" ~/Library/Keychains/login.keychain-db; done || true"
                ]
            case .adobeGenuineService:
                return [
                    "sudo rm -rf /Library/Application Support/Adobe/Adobe Desktop Common/AdobeGenuineClient",
                    "sudo rm -rf /Library/Application Support/Adobe/AdobeGCClient",
                    "sudo rm -rf /Library/Preferences/com.adobe.AdobeGenuineService.plist",
                    "sudo rm -rf /Applications/Utilities/Adobe Creative Cloud/Utils/AdobeGenuineValidator",
                    "sudo rm -rf /Applications/Utilities/Adobe Genuine Service",
                    "sudo rm -rf /Library/PrivilegedHelperTools/com.adobe.acc*",
                    "sudo find /private/tmp -type d -iname '*adobe*' ! -iname '*Adobe Downloader*' -o -type f -iname '*adobe*' ! -iname '*Adobe Downloader*' | xargs rm -rf {} \\+",
                    "sudo find /private/tmp -type d -iname '*CCLBS*' ! -iname '*Adobe Downloader*' -o -type f -iname '*adobe*' ! -iname '*Adobe Downloader*' | xargs rm -rf {} \\+",
                    "sudo find /private/var/folders/ -type d -iname '*adobe*' ! -iname '*Adobe Downloader*' -o -type f -iname '*adobe*' ! -iname '*Adobe Downloader*' | xargs rm -rf {} \\+",
                    "sudo rm -rf /private/tmp/com.adobe*",
                    "sudo rm -rf /private/tmp/Adobe*",
                    "sudo rm -rf /private/tmp/.adobe*"
                ]
            case .adobeHosts:
                return [
                    "sudo sh -c 'grep -v \"adobe\" /etc/hosts > /etc/hosts.temp && mv /etc/hosts.temp /etc/hosts'"
                ]
            }
        }
        
        var description: String {
            switch self {
            case .adobeApps:
                return String(localized: "Âà†Èô§ÊâÄÊúâÂ∑≤ÂÆâË£ÖÁöÑ Adobe Â∫îÁî®Á®ãÂ∫èÔºà‰∏çÂåÖÊã¨ Adobe DownloaderÔºâ")
            case .adobeCreativeCloud:
                return String(localized: "Âà†Èô§ Adobe Creative Cloud Â∫îÁî®Á®ãÂ∫èÂèäÂÖ∂ÁªÑ‰ª∂")
            case .adobePreferences:
                return String(localized: "Âà†Èô§ Adobe Â∫îÁî®Á®ãÂ∫èÁöÑÂÅèÂ•ΩËÆæÁΩÆÊñá‰ª∂Ôºà‰∏çÂåÖÊã¨ Adobe DownloaderÔºâ")
            case .adobeCaches:
                return String(localized: "Âà†Èô§ Adobe Â∫îÁî®Á®ãÂ∫èÁöÑÁºìÂ≠òÊñá‰ª∂Ôºà‰∏çÂåÖÊã¨ Adobe DownloaderÔºâ")
            case .adobeLicenses:
                return String(localized: "Âà†Èô§ Adobe ËÆ∏ÂèØÂíåÊøÄÊ¥ªÁõ∏ÂÖ≥Êñá‰ª∂")
            case .adobeLogs:
                return String(localized: "Âà†Èô§ Adobe Â∫îÁî®Á®ãÂ∫èÁöÑÊó•ÂøóÊñá‰ª∂Ôºà‰∏çÂåÖÊã¨ Adobe DownloaderÔºâ")
            case .adobeServices:
                return String(localized: "ÂÅúÊ≠¢Âπ∂Âà†Èô§ Adobe Áõ∏ÂÖ≥ÊúçÂä°")
            case .adobeKeychain:
                return String(localized: "Âà†Èô§Èí•Âåô‰∏≤‰∏≠ÁöÑ Adobe Áõ∏ÂÖ≥Êù°ÁõÆ")
            case .adobeGenuineService:
                return String(localized: "Âà†Èô§ Adobe Ê≠£ÁâàÈ™åËØÅÊúçÂä°ÂèäÂÖ∂ÁªÑ‰ª∂")
            case .adobeHosts:
                return String(localized: "Ê∏ÖÁêÜ hosts Êñá‰ª∂‰∏≠ÁöÑ Adobe Áõ∏ÂÖ≥Êù°ÁõÆ")
            }
        }
    }
    
    var body: some View {
        VStack(alignment: .leading) {
            Text("ÈÄâÊã©Ë¶ÅÊ∏ÖÁêÜÁöÑÂÜÖÂÆπ")
                .font(.headline)
                .padding(.bottom, 4)

            Text("Ê≥®ÊÑèÔºöÊ∏ÖÁêÜËøáÁ®ã‰∏ç‰ºöÂΩ±Âìç Adobe Downloader ÁöÑÊñá‰ª∂Âíå‰∏ãËΩΩÊï∞ÊçÆ")
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            ScrollView(showsIndicators: false) {
                VStack(alignment: .leading) {
                    ForEach(CleanupOption.allCases) { option in
                        VStack() {
                            #if DEBUG
                            Button(action: {
                                withAnimation {
                                    if expandedOptions.contains(option) {
                                        expandedOptions.remove(option)
                                    } else {
                                        expandedOptions.insert(option)
                                    }
                                }
                            }) {
                                HStack {
                                    Toggle(isOn: Binding(
                                        get: { selectedOptions.contains(option) },
                                        set: { isSelected in
                                            if isSelected {
                                                selectedOptions.insert(option)
                                            } else {
                                                selectedOptions.remove(option)
                                            }
                                        }
                                    )) {
                                        EmptyView()
                                    }
                                    .disabled(isProcessing)
                                    .labelsHidden()
                                    
                                    VStack(alignment: .leading, spacing: 4) {
                                        Text(option.localizedName)
                                            .font(.system(size: 14, weight: .medium))
                                        Text(option.description)
                                            .font(.system(size: 12))
                                            .foregroundColor(.secondary)
                                    }
                                    
                                    Spacer()
                                    
                                    Image(systemName: expandedOptions.contains(option) ? "chevron.down" : "chevron.right")
                                        .foregroundColor(.secondary)
                                        .rotationEffect(.degrees(expandedOptions.contains(option) ? 0 : -90))
                                }
                                .padding(.vertical, 8)
                                .padding(.horizontal, 6)
                                .contentShape(Rectangle())
                            }
                            .buttonStyle(.plain)
                            .disabled(isProcessing)
                            
                            if expandedOptions.contains(option) {
                                VStack(alignment: .leading, spacing: 4) {
                                    Text("Â∞ÜÊâßË°åÁöÑÂëΩ‰ª§Ôºö")
                                        .font(.system(size: 11, weight: .medium))
                                        .foregroundColor(.secondary)
                                        .padding(.top, 4)
                                        .padding(.horizontal, 6)
                                    
                                    ForEach(option.commands, id: \.self) { command in
                                        Text(command)
                                            .font(.system(size: 11, design: .monospaced))
                                            .foregroundColor(.secondary)
                                            .padding(8)
                                            .frame(maxWidth: .infinity, alignment: .leading)
                                            .background(Color(NSColor.textBackgroundColor))
                                            .cornerRadius(4)
                                            .padding(.horizontal, 6)
                                    }
                                }
                                .padding(.bottom, 8)
                            }
                            #else
                            HStack {
                                Toggle(isOn: Binding(
                                    get: { selectedOptions.contains(option) },
                                    set: { isSelected in
                                        if isSelected {
                                            selectedOptions.insert(option)
                                        } else {
                                            selectedOptions.remove(option)
                                        }
                                    }
                                )) {
                                    EmptyView()
                                }
                                .disabled(isProcessing)
                                .labelsHidden()
                                
                                VStack(alignment: .leading, spacing: 4) {
                                    Text(option.localizedName)
                                        .font(.system(size: 14, weight: .medium))
                                    Text(option.description)
                                        .font(.system(size: 12))
                                        .foregroundColor(.secondary)
                                }
                                
                                Spacer()
                            }
                            .padding(.vertical, 8)
                            .padding(.horizontal, 6)
                            #endif
                        }
                        .background(Color(NSColor.controlBackgroundColor))
                        .cornerRadius(8)
                    }
                }
            }
            
            Divider()
                .padding(.vertical, 8)
            
            VStack(alignment: .leading, spacing: 8) {
                if isProcessing {
                    HStack {
                        ProgressView(value: Double(currentCommandIndex), total: Double(totalCommands)) {
                            Text("Ê∏ÖÁêÜËøõÂ∫¶Ôºö\(currentCommandIndex)/\(totalCommands)")
                                .font(.system(size: 12))
                        }
                        .progressViewStyle(LinearProgressViewStyle())
                        
                        Button(action: {
                            isCancelled = true
                        }) {
                            Text("ÂèñÊ∂à")
                        }
                        .disabled(isCancelled)
                    }
                    
                    if let lastLog = cleanupLogs.last {
                        #if DEBUG
                        Text("ÂΩìÂâçÊâßË°åÔºö\(lastLog.command)")
                            .font(.system(size: 12))
                            .foregroundColor(.secondary)
                            .lineLimit(1)
                            .truncationMode(.middle)
                        #else
                        Text("ÂΩìÂâçÊâßË°åÔºö\(CleanupLog.getCleanupDescription(for: lastLog.command))")
                            .font(.system(size: 12))
                            .foregroundColor(.secondary)
                            .lineLimit(1)
                            .truncationMode(.middle)
                        #endif
                    }
                }
                
                VStack(alignment: .leading, spacing: 4) {
                    Button(action: {
                        withAnimation {
                            isLogExpanded.toggle()
                        }
                    }) {
                        HStack {
                            Text("ÊúÄËøëÊó•ÂøóÔºö")
                                .font(.system(size: 12, weight: .medium))
                            
                            if isProcessing {
                                Text("Ê≠£Âú®ÊâßË°å...")
                                    .font(.system(size: 12))
                                    .foregroundColor(.secondary)
                            }
                            
                            Spacer()
                            
                            Image(systemName: isLogExpanded ? "chevron.down" : "chevron.right")
                                .foregroundColor(.secondary)
                        }
                        .padding(.vertical, 4)
                        .contentShape(Rectangle())
                    }
                    .buttonStyle(.plain)
                    
                    ScrollView {
                        VStack(alignment: .leading, spacing: 4) {
                            if cleanupLogs.isEmpty {
                                HStack {
                                    Spacer()
                                    Text("ÊöÇÊó†Ê∏ÖÁêÜËÆ∞ÂΩï")
                                        .font(.system(size: 11))
                                        .foregroundColor(.secondary)
                                    Spacer()
                                }
                                .padding(.vertical, 8)
                            } else {
                                if isLogExpanded {
                                    ForEach(cleanupLogs.reversed()) { log in
                                        LogEntryView(log: log)
                                    }
                                } else if let lastLog = cleanupLogs.last {
                                    LogEntryView(log: lastLog)
                                }
                            }
                        }
                        .padding(.vertical, 4)
                    }
                    .frame(height: cleanupLogs.isEmpty ? 40 : (isLogExpanded ? 200 : 40))
                    .animation(.easeInOut, value: isLogExpanded)
                }
                .padding(8)
                .background(Color(NSColor.textBackgroundColor))
                .cornerRadius(6)
            }
            
            HStack {
                Button(action: {
                    selectedOptions = Set(CleanupOption.allCases)
                }) {
                    Text("ÂÖ®ÈÄâ")
                }
                .disabled(isProcessing)
                
                Button(action: {
                    selectedOptions.removeAll()
                }) {
                    Text("ÂèñÊ∂àÂÖ®ÈÄâ")
                }
                .disabled(isProcessing)
                
                #if DEBUG
                Button(action: {
                    if expandedOptions.count == CleanupOption.allCases.count {
                        expandedOptions.removeAll()
                    } else {
                        expandedOptions = Set(CleanupOption.allCases)
                    }
                }) {
                    Text(expandedOptions.count == CleanupOption.allCases.count ? "ÊäòÂè†ÂÖ®ÈÉ®" : "Â±ïÂºÄÂÖ®ÈÉ®")
                }
                .disabled(isProcessing)
                #endif
                
                Spacer()
                
                Button(action: {
                    if !selectedOptions.isEmpty {
                        showConfirmation = true
                    }
                }) {
                    Text("ÂºÄÂßãÊ∏ÖÁêÜ")
                }
                .disabled(selectedOptions.isEmpty || isProcessing)
            }
            .padding(.top, 8)
        }
        .padding()
        .alert("Á°ÆËÆ§Ê∏ÖÁêÜ", isPresented: $showConfirmation) {
            Button("ÂèñÊ∂à", role: .cancel) { }
            Button("Á°ÆÂÆö", role: .destructive) {
                cleanupSelectedItems()
            }
        } message: {
            Text("ËøôÂ∞ÜÂà†Èô§ÊâÄÈÄâÁöÑ Adobe Áõ∏ÂÖ≥Êñá‰ª∂ÔºåËØ•Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇÊ∏ÖÁêÜËøáÁ®ã‰∏ç‰ºöÂΩ±Âìç Adobe Downloader ÁöÑÊñá‰ª∂Âíå‰∏ãËΩΩÊï∞ÊçÆ„ÄÇÊòØÂê¶ÁªßÁª≠Ôºü")
        }
        .alert(isPresented: $showAlert) {
            Alert(
                title: Text("Ê∏ÖÁêÜÁªìÊûú"),
                message: Text(alertMessage),
                dismissButton: .default(Text("Á°ÆÂÆö"))
            )
        }
    }
    
    private func cleanupSelectedItems() {
        isProcessing = true
        cleanupLogs.removeAll()
        currentCommandIndex = 0
        isCancelled = false
        
        let userHome = NSHomeDirectory()
        
        var commands: [String] = []
        for option in selectedOptions {
            let userCommands = option.commands.map { command in
                command.replacingOccurrences(of: "~/", with: "\(userHome)/")
            }
            commands.append(contentsOf: userCommands)
        }

        totalCommands = commands.count
        
        executeNextCommand(commands: commands)
    }
    
    private func executeNextCommand(commands: [String]) {
        guard currentCommandIndex < commands.count else {
            DispatchQueue.main.async {
                isProcessing = false
                alertMessage = isCancelled ? String(localized: "Ê∏ÖÁêÜÂ∑≤ÂèñÊ∂à") : String(localized: "Ê∏ÖÁêÜÂÆåÊàê")
                showAlert = true
                selectedOptions.removeAll()
            }
            return
        }
        
        if isCancelled {
            DispatchQueue.main.async {
                isProcessing = false
                alertMessage = String(localized: "Ê∏ÖÁêÜÂ∑≤ÂèñÊ∂à")
                showAlert = true
                selectedOptions.removeAll()
            }
            return
        }
        
        let command = commands[currentCommandIndex]
        cleanupLogs.append(CleanupLog(
            timestamp: Date(),
            command: command,
            status: .running,
            message: String(localized: "Ê≠£Âú®ÊâßË°å...")
        ))
        
        let timeoutTimer = DispatchSource.makeTimerSource(queue: .global())
        timeoutTimer.schedule(deadline: .now() + 30)
        timeoutTimer.setEventHandler { [self] in
            if let index = cleanupLogs.lastIndex(where: { $0.command == command }) {
                DispatchQueue.main.async {
                    cleanupLogs[index] = CleanupLog(
                        timestamp: Date(),
                        command: command,
                        status: .error,
                        message: String(localized: "ÊâßË°åÁªìÊûúÔºöÊâßË°åË∂ÖÊó∂\nÊâßË°åÂëΩ‰ª§Ôºö\(command)")
                    )
                    currentCommandIndex += 1
                    executeNextCommand(commands: commands)
                }
            }
        }
        timeoutTimer.resume()
        
        PrivilegedHelperManager.shared.executeCommand(command) { [self] output in
            timeoutTimer.cancel()
            DispatchQueue.main.async {
                if let index = cleanupLogs.lastIndex(where: { $0.command == command }) {
                    if isCancelled {
                        cleanupLogs[index] = CleanupLog(
                            timestamp: Date(),
                            command: command,
                            status: .cancelled,
                            message: String(localized: "Â∑≤ÂèñÊ∂à")
                        )
                    } else {
                        let isSuccess = output.isEmpty || output.lowercased() == "success"
                        let message = if isSuccess {
                            String(localized: "ÊâßË°åÊàêÂäü")
                        } else {
                            String(localized: "ÊâßË°åÁªìÊûúÔºö\(output)\nÊâßË°åÂëΩ‰ª§Ôºö\(command)")
                        }
                        cleanupLogs[index] = CleanupLog(
                            timestamp: Date(),
                            command: command,
                            status: isSuccess ? .success : .error,
                            message: message
                        )
                    }
                }
                currentCommandIndex += 1
                executeNextCommand(commands: commands)
            }
        }
    }
    
    private func statusIcon(for status: CleanupLog.LogStatus) -> String {
        switch status {
        case .running:
            return "arrow.triangle.2.circlepath"
        case .success:
            return "checkmark.circle.fill"
        case .error:
            return "exclamationmark.circle.fill"
        case .cancelled:
            return "xmark.circle.fill"
        }
    }
    
    private func statusColor(for status: CleanupLog.LogStatus) -> Color {
        switch status {
        case .running:
            return .blue
        case .success:
            return .green
        case .error:
            return .red
        case .cancelled:
            return .orange
        }
    }
    
    private func timeString(from date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss"
        return formatter.string(from: date)
    }
}

struct LogEntryView: View {
    let log: CleanupLog
    @State private var showCopyButton = false
    
    var body: some View {
        HStack {
            Image(systemName: statusIcon(for: log.status))
                .foregroundColor(statusColor(for: log.status))
            
            Text(timeString(from: log.timestamp))
                .font(.system(size: 11))
                .foregroundColor(.secondary)
            
            #if DEBUG
            Text(log.command)
                .font(.system(size: 11, design: .monospaced))
                .lineLimit(1)
                .truncationMode(.middle)
            #else
            Text(CleanupLog.getCleanupDescription(for: log.command))
                .font(.system(size: 11))
                .lineLimit(1)
                .truncationMode(.middle)
            #endif
            
            Spacer()
            
            if log.status == .error && !log.message.isEmpty {
                HStack(spacing: 4) {
                    Text(truncatedErrorMessage(log.message))
                        .font(.system(size: 11))
                        .foregroundColor(.secondary)
                    
                    Button(action: {
                        copyToClipboard(log.message)
                    }) {
                        Image(systemName: "doc.on.doc")
                            .font(.system(size: 11))
                    }
                    .buttonStyle(.plain)
                    .help("Â§çÂà∂ÂÆåÊï¥ÈîôËØØ‰ø°ÊÅØ")
                }
            } else {
                Text(log.message)
                    .font(.system(size: 11))
                    .foregroundColor(.secondary)
            }
        }
        .padding(.vertical, 4)
        .padding(.horizontal, 8)
    }
    
    private func truncatedErrorMessage(_ message: String) -> String {
        if message.hasPrefix("ÊâßË°åÂ§±Ë¥•Ôºö") {
            let errorMessage = String(message.dropFirst(5))
            if errorMessage.count > 30 {
                return "ÊâßË°åÂ§±Ë¥•Ôºö" + errorMessage.prefix(30) + "..."
            }
        }
        return message
    }
    
    private func copyToClipboard(_ message: String) {
        NSPasteboard.general.clearContents()
        NSPasteboard.general.setString(message, forType: .string)
    }
    
    private func statusIcon(for status: CleanupLog.LogStatus) -> String {
        switch status {
        case .running:
            return "arrow.triangle.2.circlepath"
        case .success:
            return "checkmark.circle.fill"
        case .error:
            return "exclamationmark.circle.fill"
        case .cancelled:
            return "xmark.circle.fill"
        }
    }
    
    private func statusColor(for status: CleanupLog.LogStatus) -> Color {
        switch status {
        case .running:
            return .blue
        case .success:
            return .green
        case .error:
            return .red
        case .cancelled:
            return .orange
        }
    }
    
    private func timeString(from date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss"
        return formatter.string(from: date)
    }
}

#Preview("About Tab") {
    AboutAppView()
}

#Preview("General Settings") {
    let networkManager = NetworkManager()
    VStack {
        GeneralSettingsView(updater: PreviewUpdater())
            .environmentObject(networkManager)
    }
    .fixedSize()
}

#Preview("Q&A View") {
    QAView()
        .frame(width: 600)
}

#Preview("Cleanup View") {
    CleanupView()
        .frame(width: 600)
}

#Preview("Complete About View") {
    AboutView(updater: PreviewUpdater())
        .environmentObject(NetworkManager())
}
